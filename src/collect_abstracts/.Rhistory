# -----------------------------------------------------------------------------
#
# Organize microsporidia species papers
#
# Jason Jiang - Created: 2022/05/02
#               Last edited: 2022/05/09
#
# Mideo Lab - Microsporidia text mining
#
# Select microsporidia species for analysis and extract first papers describing
# each species.
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
library(writexl)
################################################################################
### Helper functions
get_year_first_identified <- Vectorize(function(years) {
# ----------------------------------------------------------------------------
# Get the first year a Microsporidia species was described in, as an integer
#
# Input:
#   years: entry from the 'Date Identified (year)' column from microsporidia
#          species dataset
# ----------------------------------------------------------------------------
return(as.integer(str_remove(str_split(years, '; ')[[1]][1], ' \\(.+')))
})
get_first_reference <- Vectorize(function(ref) {
# ----------------------------------------------------------------------------
# Get reference for the first paper describing a particular Microsporidia species
#
# Input:
#   ref: entry from References column of Microsporidia dataset
# ----------------------------------------------------------------------------
return(str_remove(trimws(str_split(ref, '\n')[[1]][1]), '^\\d\\. '))
})
################################################################################
# Supplemental table S1 from Murareanu et al. 2021 (Microsporidia species dataset)
microsp_data <- read_csv('../../data/microsporidia_species.csv')
# Exclude any species coming from these papers
# I'll talk more about this during lab meeting
excluded_papers <- readLines('../../data/excluded_papers.txt')
microsp_data_test <- microsp_data %>%
rename(species = `Species Name`) %>%
mutate(year_first_described = get_year_first_identified(`Date Identified (year)`),
first_paper_reference = get_first_reference(References),
first_paper_title = NA,
abstract = NA,
notes = NA,
# Is the paper in a foreign language?
foreign = NA) %>%
# filter out cases where year first described is unknown or ambiguous
# (NA or '?' in the microsporidia dataset for Date Identified)
filter(!is.na(year_first_described),
# Filter microsporidia species to species from 1977 to 2021
# Species from before 1977 come from Sprague book
year_first_described >= 1977) %>%
rowwise() %>%
filter(!any(str_detect(References, excluded_papers)))
view(microsp_data)
view(microsp_data_test)
microsp_data_test <- microsp_data_test %>%
rowwise() %>%
mutate(num_papers = length(str_split(References, '\n')[[1]][1]))
view(microsp_data_test)
length(str_split('Hello\nthere\n', '\n')[[1]][1])
length(str_split('Hello\nthere\n', '\n')[[1]])
microsp_data_test <- microsp_data_test %>%
rowwise() %>%
mutate(num_papers = length(str_split(References, '\n')[[1]]))
view(microsp_data_test)
nrow(filter(microsp_data_test, num_papers == 1))
634 - 579
view(microsp_data)
# -----------------------------------------------------------------------------
#
# Match abstracts to microsporidia host data
#
# Jason Jiang - Created: 2022/05/09
#               Last edited: 2022/05/09
#
# Mideo Lab - Microsporidia text mining
#
# Add host data from Supplemental Table S1 from Murareanu et al. to manually
# extracted microsporidia abstract data (manually_collect_abstracts.xlsx,
# generated by src/organize_species_papers.R)
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
library(readxl)
################################################################################
abstracts <- read_xlsx('../../data/manually_collect_abstracts.xlsx') %>%
# fix weird issue with true/false being turned into dates by xlsx format
mutate(foreign = ifelse(!is.na(foreign), TRUE, FALSE))
microsp_data <- read_csv('../../data/microsporidia_species.csv')
host_data <- microsp_data %>%
rename(species = `Species Name`, hosts = `Natural Host(s)`)
abstracts <- merge(x = abstracts, y = host_data, by = 'species', all = TRUE)
view(abstracts)
test <- filter(abstracts, !is.na(first_paper_reference))
view(test)
abstracts <- merge(x = abstracts, y = host_data, by = 'species', all = TRUE) %>%
filter(!is.na(first_paper_reference))
abstracts <- read_xlsx('../../data/manually_collect_abstracts.xlsx') %>%
# fix weird issue with true/false being turned into dates by xlsx format
mutate(foreign = ifelse(!is.na(foreign), TRUE, FALSE))
microsp_data <- read_csv('../../data/microsporidia_species.csv') %>%
rename(species = `Species Name`, hosts = `Natural Host(s)`)
abstracts <- read_xlsx('../../data/manually_collect_abstracts.xlsx') %>%
# fix weird issue with true/false being turned into dates by xlsx format
mutate(foreign = ifelse(!is.na(foreign), TRUE, FALSE))
microsp_data <- read_csv('../../data/microsporidia_species.csv') %>%
rename(species = `Species Name`, hosts = `Natural Host(s)`)
# add microsporidia species trait data to abstracts dataframe
abstracts <- merge(x = abstracts, y = microsp_data,
by = 'species', all = TRUE) %>%
filter(!is.na(first_paper_reference))
# write the abstracts dataframe, now with traits information, to the data folder
write_csv(abstracts, '../../data/abstracts_traits.csv')
getwd()
# -----------------------------------------------------------------------------
#
# Text
#
# Jason Jiang - Created: 2022/05/10
#               Last edited: 2022/05/10
#
# Mideo Lab - Microsporidia text mining
#
# Text
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
################################################################################
microsp_data <- read_csv('../../data/abstracts_traits.csv')
view(microsp_data)
# ---------------------------------------------------------------------------
# Blah
# ---------------------------------------------------------------------------
NA
x <- 'Hello (there) my (friends)'
str_extract_all(x, '\\(.+\\)')
number_regex <- '\\d\\.?\\d{1,2}'
x <- '4.0 um is the length of the spore, 5.04 um is the width of the spore'
str_extract_all(x, number_regex)
x <- '4.0 um is the length of the spore, 5.04 um is the width of the spore; I am 5 meters tall'
str_extract_all(x, number_regex)
number_regex <- '\\d\\.?\\d?'
str_extract_all(x, number_regex)
number_regex <- '\\d\\.?\\d*'
str_extract_all(x, number_regex)
microsp_data <- read_csv('../../data/abstracts_traits.csv')
view(microsp_data)
library(glue)  # For formatting strings like in Python
number_regex <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension_regex <-  # ex: 4.0 (3.0 - 5.0)
glue('{number_regex}\\s*\\(?\\s*{number_regex}\\s*\\W\\s*{number_regex}\\s*\\)')
str_extract_all('5.0 x 3', '\\(.+\\)')
str_extract_all('5.0 x 3', number_regex)
str_extract_all('5.0 x 3 x 2.01122', number_regex)
str_extract_all('5.0 x 3 x 2.01122', dimension_regex)
str_extract_all('5.0 (4 - 5)', dimension_regex))
str_extract_all('5.0 (4 - 5)', dimension_regex)
str_extract_all('5.0 (4 - 5) is the measurment', dimension_regex)
str_extract_all('5.0(4   - 5 ) is the measurment', dimension_regex)
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0)
glue('{number}\\s*\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\W*\\s*{dimension}\\s*\W{0,3}')
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0)
glue('{number}\\s*\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\W*\\s*{dimension}\\s*\\W{0,3}')
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0)
glue('{number}\\s*\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w{0,3}')
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0)
glue('{number}\\s*\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w{0,3}')
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0)
glue('{number}\\s*\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
txt = 'Observations were made on the development of Microsporidium lesiodermi sp. nov. described from Lasioderma serricorne (Coleoptera, Curculionidae) collected from a grain warehouse at Chandannagore, West Bengal, India. The parasite causes general infection in the host and this ultimately leads to mortality. Schizonts are multinucleated and the nuclei are diplokaryotic. Each sporogonial plasmodium contains 10-12 single nuclei. Most spores are macrospores, 3.6-5.3 (4.4) µm × 1.3-3.6 (3.0) µm, but a small number of sporophorous vesicles contain microspores, 1.6-3.3 (2.2) µm × 0.8-1.6 (1.4) µm. Both the spore types possess a single nucleus in the middle and a vacuole at the posterior region. The polar filament is thin and 25-30 µm long.'
str_extract_all(txt, number)
str_extract_all(txt, dimension)
str_extract_all(txt, length_width)
str_detect('hello-there', '-')
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0) or 4 - 5 (4.5)
glue('{number}\\s*\\W?\\s*{number}?\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
length_width <-
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
str_extract_all(txt, number)
str_extract_all(txt, dimension)
str_extract_all(txt, length_width)
txt
number <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
dimension  <-  # ex: 4.0 (3.0 - 5.0) um or 4 - 5 (4.5)
glue('{number}\\s*\\W?\\s*{number}?\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)\\s*\\W?[[:alpha:]]*')
length_width <-  # ex: 4.0 (3.0 - 5.0) um x 4 - 5 (4.5) um
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
str_extract_all(txt, length_width)
str_extract_all(txt, length_width)[[1]]
str_c(str_extract_all(txt, length_width)[[1]], ', ')
str_c(str_extract_all(txt, length_width)[[1]], sep = ', ')
str_c(str_extract_all(txt, length_width)[[1]], collapse = ', ')
str_c(str_extract_all(txt, length_width)[[1]], collapse = ' \\| ')
str_c(str_extract_all(txt, length_width)[[1]], collapse = ' | ')
## Global variables for regex patterns to extract spore length/width data
NUMBER <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
DIMENSION  <-  # ex: 4.0 (3.0 - 5.0) um or 4 - 5 (4.5)
glue('{number}\\s*\\W?\\s*{number}?\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)\\s*\\W?[[:alpha:]]*')
LENGTH_WIDTH <-  # ex: 4.0 (3.0 - 5.0) um x 4 - 5 (4.5) um
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
################################################################################
## Helper functions
extract_spore_dimensions <- Vectorize(function(abstract) {
# ---------------------------------------------------------------------------
# Blah
# ---------------------------------------------------------------------------
return(str_c(str_extract_all(abstract, LENGTH_WIDTH)[[1]],
collapse = ' | '))
})
view(microsp_data)
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
rename(avg_length = `Spore Length Average (µm)`,
avg_width = 'Spore Width Average (µm)') %>%
select(species, year_first_described, first_paper_title, abstract,
avg_length, avg_width) %>%
mutate(extracted_dimensions = extract_spore_dimensions(abstract))
view(microsp_data)
view(filter(microsp_data, !is.na(extracted_dimensions), extracted_dimensions != ''))
txt
## Global variables for regex patterns to extract spore length/width data
NUMBER <- '\\d\\.?\\d*\\s*\\W?[[:alpha:]]*'  # ex: 4, 5.0, 4.05, etc
DIMENSION  <-  # ex: 4.0 (3.0 - 5.0) um or 4 - 5 (4.5)
glue('{number}\\s*\\W?\\s*{number}?\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)')
LENGTH_WIDTH <-  # ex: 4.0 (3.0 - 5.0) um x 4 - 5 (4.5) um
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
extract_spore_dimensions <- Vectorize(function(abstract) {
# ---------------------------------------------------------------------------
# Blah
# ---------------------------------------------------------------------------
return(str_c(str_extract_all(abstract, LENGTH_WIDTH)[[1]],
collapse = ' | '))
})
################################################################################
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
rename(avg_length = `Spore Length Average (µm)`,
avg_width = 'Spore Width Average (µm)') %>%
select(species, year_first_described, first_paper_title, abstract,
avg_length, avg_width) %>%
mutate(extracted_dimensions = extract_spore_dimensions(abstract))
view(microsp_data)
view(filter(microsp_data, !is.na(extracted_dimensions), extracted_dimensions != ''))
x = '7.5 × 5.1 μm'
str_extract_all(x, NUMBER)
NUMBER <- '\\d\\.?\\d*'  # ex: 4, 5.0, 4.05, etc
DIMENSION  <-  # ex: 4.0 (3.0 - 5.0) um or 4 - 5 (4.5)
glue('{number}\\s*\\W?\\s*{number}?\\(?\\s*{number}\\s*\\W\\s*{number}\\s*\\)\\s*\\W?[[:alpha:]]*')
LENGTH_WIDTH <-  # ex: 4.0 (3.0 - 5.0) um x 4 - 5 (4.5) um
glue('{dimension}\\s*\\W*\\s*{dimension}\\s*\\W?\\w*')
str_extract_all(x, NUMBER)
str_extract_all(x, DIMENSION)
microsp_data <- read_csv('../../data/abstracts_traits.csv')
view(microsp_data)
detect_coils <- Vectorize(function(abstract) {
return(str_detect(abstract, 'coil') | str_detect(abstract, 'turn'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`) %>%
mutate(has_coil_data = detect_coils(abstract))
view(microsp_data)
false_pos <- filter(microsp_data, !is.na(`Polar Tubule Coils Range`), !has_coil_data)
rm(false_pos)
false_neg <- filter(microsp_data, !is.na(`Polar Tubule Coils Range`), !has_coil_data)
false_pos <- filter(microsp_data, is.na(`Polar Tubule Coils Range`), has_coil_data)
view(false_pos)
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <- filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <- filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
634 - 10 - 170
view(false_pos)
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, '//s*coil//s*') | str_detect(abstract, '//s*turn//s*'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
view(false_neg)
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, '//s*coils?//s*') | str_detect(abstract, '//s*turns?//s*'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, '//s*coil[s]?//s*') | str_detect(abstract, '//s*turn[s]?//s*'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
str_detect('coils', '//s*coil[s]?//s*')
str_detect('coils', '//s*coil[[s?//s*')
str_detect('coils', '//s*coil[[s]]?//s*')
str_detect('coils', '//s*coils?//s*')
str_detect('coils', '//s*coil?s//s*')
str_detect('coils', '//s*coils//s*')
str_detect(' coils ', '//s*coils//s*')
str_detect(' ', '\\s')
str_detect(' ', '\\s*')
str_detect(' coils ', 'coils')
str_detect(' coils ', '*//scoils')
str_detect(' coils ', '*//scoils')
str_detect(' coils ', '//s*coils')
str_detect(' coils ', ' *coils')
str_detect(' coils ', ' *coils *')
str_detect(' coils', ' *coils *')
str_detect('coils', ' *coils *')
str_detect('  coils', ' *coils *')
tr_detect(' coil ', ' *coil[s]? *')
str_detect(' coil ', ' *coil[s]? *')
str_detect(' coils ', ' *coil[s]? *')
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, ' *coil[s]? *') | str_detect(abstract, ' *turn[s]? *'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
(634 - 180) / 634
view(false_neg)
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract('[Ff]ilament'))))
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')))
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')) %>%
filter(tube_data))
write_csv(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')) %>%
filter(tube_data), 'test.csv')
getwd()
