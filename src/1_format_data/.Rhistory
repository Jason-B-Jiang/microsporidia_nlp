`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
view(false_neg)
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, '//s*coils?//s*') | str_detect(abstract, '//s*turns?//s*'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, '//s*coil[s]?//s*') | str_detect(abstract, '//s*turn[s]?//s*'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
str_detect('coils', '//s*coil[s]?//s*')
str_detect('coils', '//s*coil[[s?//s*')
str_detect('coils', '//s*coil[[s]]?//s*')
str_detect('coils', '//s*coils?//s*')
str_detect('coils', '//s*coil?s//s*')
str_detect('coils', '//s*coils//s*')
str_detect(' coils ', '//s*coils//s*')
str_detect(' ', '\\s')
str_detect(' ', '\\s*')
str_detect(' coils ', 'coils')
str_detect(' coils ', '*//scoils')
str_detect(' coils ', '*//scoils')
str_detect(' coils ', '//s*coils')
str_detect(' coils ', ' *coils')
str_detect(' coils ', ' *coils *')
str_detect(' coils', ' *coils *')
str_detect('coils', ' *coils *')
str_detect('  coils', ' *coils *')
tr_detect(' coil ', ' *coil[s]? *')
str_detect(' coil ', ' *coil[s]? *')
str_detect(' coils ', ' *coil[s]? *')
detect_coils <- Vectorize(function(abstract) {
# coil or turn appears as individual words in the abstract, suggesting polar
# tube coil/turn data
return(str_detect(abstract, ' *coil[s]? *') | str_detect(abstract, ' *turn[s]? *'))
})
microsp_data <- read_csv('../../data/abstracts_traits.csv') %>%
select(species, year_first_described, first_paper_title, abstract,
`Polar Tubule Coils Range`, `Polar Tubule Coils Average`) %>%
mutate(has_coil_data = detect_coils(abstract))
false_neg <-
filter(microsp_data, !is.na(`Polar Tubule Coils Range`) | !is.na(`Polar Tubule Coils Average`), !has_coil_data)
false_pos <-
filter(microsp_data, is.na(`Polar Tubule Coils Range`) & is.na(`Polar Tubule Coils Average`), has_coil_data)
(634 - 180) / 634
view(false_neg)
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract('[Ff]ilament'))))
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')))
view(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')) %>%
filter(tube_data))
write_csv(false_neg %>%
rowwise() %>%
mutate(tube_data = str_detect(abstract, '[Tt]ube') | str_detect(abstract, '[Ff]ilament')) %>%
filter(tube_data), 'test.csv')
getwd()
# -----------------------------------------------------------------------------
library(tidyverse)
################################################################################
abstract_traits <- read_csv('../../data/abstract_traits')
abstract_traits <- abstract_traits %>%
rowwise() %>%
mutate(multi_paper = length(str_split(refs, '\n')[[1]]) > 1,
format_locality = str_detect(locality, '\\(.+?;.+?\\)'))
library(tidyverse)
################################################################################
abstract_traits <- read_csv('../../data/abstract_traits.csv')
abstract_traits <- abstract_traits %>%
rowwise() %>%
mutate(multi_paper = length(str_split(refs, '\n')[[1]]) > 1,
format_locality = str_detect(locality, '\\(.+?;.+?\\)'))
bstract_traits <- read_csv('../../data/abstract_traits.csv')
abstract_traits <- read_csv('../../data/abstracts_traits.csv')
abstract_traits <- abstract_traits %>%
rowwise() %>%
mutate(multi_paper = length(str_split(refs, '\n')[[1]]) > 1,
format_locality = str_detect(locality, '\\(.+?;.+?\\)'))
view(abstract_traits)
sum(abstract_traits$multi_paper)
sum(abstract_traits$format_locality)
?sum
sum(abstract_traits$format_locality, na.rm = T)
# Save and manually clean up
writexl::write_xlsx(abstract_traits, '../../data/abstracts_traits_formatted.xlsx')
View(abstract_traits)
source("~/Desktop/microsporidia_nlp/src/1_format_data/3_misc_cleanup.R", echo=TRUE)
source("~/Desktop/microsporidia_nlp/src/1_format_data/3_misc_cleanup.R", echo=TRUE)
view(filter(abstract_traits, format_locality))
view(filter(abstract_traits, format_locality)$species)
# -----------------------------------------------------------------------------
#
# Format manually collected paper title/abstract data for microsporidia
#
# Jason Jiang - Created: 2022/05/18
#               Last edited: 2022/05/18
#
# Mideo Lab - Microsporidia text mining
#
# Clean extracted paper titles + abstracts, and add back in microsporidia trait
# data
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
library(readxl)
################################################################################
## Helper functions
clean_text <- Vectorize(function(text) {
# ---------------------------------------------------------------------------
# Replace tabs and newlines with spaces, remove excess + trailing whitespacee
# from a string.
#
# Input:
#   text: paper title or abstract
# ---------------------------------------------------------------------------
trimws(str_replace_all(
str_replace_all(str_replace_all(text, '\t', ' '), '\n', ' '),
' +',
' '))
})
################################################################################
# Load in dataframe of manually extracted microsporidia paper titles + abstracts,
# from select_species_papers.R
abstracts <- read_xlsx('../../data/manually_collect_abstracts.xlsx') %>%
# fix weird issue with true/false being turned into dates by xlsx format
mutate(foreign = ifelse(!is.na(foreign), TRUE, FALSE),
first_paper_title = clean_text(first_paper_title),
abstract = clean_text(abstract)) %>%
filter(!is.na(first_paper_title)) %>%
select(-notes)
# Load in supplemental table S1 from Murareanu et al., 2021
microsp_data <- read_csv('../../data/microsporidia_species.csv') %>%
select(-Timestamp, -`Host Environment`, -`Transmission`,
-`Calculated Volume (µm³) (see methods)`,
-`Calculated Polar Tubule (μm) (see methods)`,
-`18S Accession #`, -`Has the genome been sequenced?`,
-`Important Remarks`) %>%
rename(species = `Species Name`, hosts = `Natural Host(s)`,
identification_dates = `Date Identified (year)`,
hosts_natural = `Natural Host(s)`,
hosts_experimental = `Experimental Host(s)`,
host_lifestage = `Host Life Stage during Infection`,
infection_site = `Site of Infection`,
spore_length_avg = `Spore Length Average (µm)`,
spore_width_avg = `Spore Width Average (µm)`,
spore_shape = `Spore Shape (Class; Condition)`,
locality = `Locality`,
nucleus = Nucleus,
# pt = polar tube
pt_max = `Measured Polar Tubule Length Max (μm)`,
pt_min = `Measured Polar Tubule Length Min (μm)`,
pt_avg = `Measured Polar Tubule (μm)`,
pt_coils_range = `Polar Tubule Coils Range`,
pt_coils_avg = `Polar Tubule Coils Average`,
refs = References)
################################################################################
# Merge abstracts and microsp_data dataframes by species names, to associate
# microsporidia traits with their papers
abstracts_traits <- merge(x = abstracts, y = microsp_data,
by = 'species', all = TRUE) %>%
filter(!is.na(first_paper_title))
write_csv(abstracts_traits, '../../data/abstracts_traits.csv')
abstract_traits <- read_csv('../../data/abstracts_traits.csv')
abstract_traits <- abstract_traits %>%
rowwise() %>%
mutate(multi_paper = length(str_split(refs, '\n')[[1]]) > 1,
format_locality = str_detect(locality, '\\(.+?;.+?\\)'))
view(filter(abstract_traits, format_locality))
rm(abstract_traits)
abstract_traits <- abstract_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]]))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstract_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]]))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]]))
view(filter(abstracts_traits, num_papers > 1))
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(refs, sep = '\n') %>%
mutate(refs = trimws(refs))
view(abstracts_traits)
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]]),
multi_paper_species = num_papers > 1) %>%
separate_rows(refs, sep = '\n') %>%
mutate(refs = trimws(refs))
view(abstracts_traits)
view(filter(abstracts_traits, multi_paper_species))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]]),
multi_paper_species = num_papers > 1) %>%
separate_rows(refs, sep = '\n') %>%
mutate(refs = trimws(refs))
view(abstracts_traits)
view(filter(abstracts_traits, num_papers > 1))
colnames(abstract_traits)
colnames(abstracts_traits)
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(refs, sep = '\n') %>%
mutate(refs = trimws(refs))
source("~/Desktop/microsporidia_nlp/src/1_format_data/2_format_species_paper_data.R", echo=TRUE)
source("~/Desktop/microsporidia_nlp/src/1_format_data/2_format_species_paper_data.R", echo=TRUE)
source("~/Desktop/microsporidia_nlp/src/1_format_data/2_format_species_paper_data.R", echo=TRUE)
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(refs, sep = '\n') %>%
mutate(refs = trimws(refs))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(refs = trimws(refs))
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(refs = trimws(all_refs))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(all_refs = trimws(all_refs))
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(all_refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(all_refs = trimws(all_refs))
view(abstracts_traits)
abstracts_traits[1, 'species']
abstracts_traits[1, 'num_papers']
abstracts_traits[1,]
abstracts_traits[1,]$num_papers
abstracts_traits[1, 'num_papers'] <- 1000000000
view(abstracts_traits)
abstracts_traits[1, 'num_papers'] <- 10
view(abstracts_traits)
abstracts_traits[1, 'num_papers'] <- 2
view(abstracts_traits)
COLUMNS_OF_INTEREST <- c('species', 'year_first_described', 'paper_ref',
'paper_title', 'abstract', 'all_refs', 'num_papers')
COLUMNS_TO_CLEAR <-
colnames(abstracts_traits)[!(colnames(abstracts_traits) %in% COLUMNS_OF_INTEREST)]
COLUMNS_TO_CLEAR
abstracts_traits[2, c('species', 'paper_title')]
abstracts_traits[1, c('species', 'paper_title')]
abstracts_traits[1, c('species', 'year_first_described')] <- c('hello', 'goodbye')
abstracts_traits[1, c('species', 'year_first_described')] <- list('hello', 'goodbye')
abstracts_traits[1, c('species', 'year_first_described')] <- list('hello', 1200)
view(abstracts_traits)
abstracts_traits[1, c('species', 'year_first_described')] <- list('Abelspora portucalensis', 1987)
view(abstracts_traits)
?rep
rep(NA, 3)
as.list(rep(NA, 3))
abstracts_traits[2,]$all_refs
str_extract(abstracts_traits[2,]$all_refs, '^\d+\\.')
str_extract(abstracts_traits[2,]$all_refs, '^\\d+\\.')
str_extract(abstracts_traits[2,]$all_refs, '^\\d+(?=\\.)')
str_extract(abstracts_traits[2,]$all_refs, '^\\d+(?=\\.)')
str_c('hello', 'there', 'friends')
COLUMNS_OF_INTEREST <- c('species', 'year_first_described', 'paper_ref',
'paper_title', 'abstract', 'all_refs', 'num_papers')
COLUMNS_TO_CLEAR <-
colnames(abstracts_traits)[!(colnames(abstracts_traits) %in% COLUMNS_OF_INTEREST)]
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits[i,]$num_papers > 1) {
# Assign NA value for columns to clear
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
abstracts_traits[i, 'species'] <-
str_c(species, ' (', str_extract(abstracts_traits[i,]$all_refs, '^\\d+(?=\\.)'), ')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits[i,]$all_refs, '^\\d+\\. +')
}
}
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits[i,]$num_papers > 1) {
# Assign NA value for columns to clear
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
abstracts_traits[i, 'species'] <-
str_c(abstracts_traits$species[i],
' (',
str_extract(abstracts_traits$all_refs[i], '^\\d+(?=\\.)'),
')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits$all_refs[i], '^\\d+\\. +')
}
}
view(abstracts_traits)
view(filter(abstracts_traits, num_papers > 1))
# -----------------------------------------------------------------------------
#
# Miscellaneous cleanup
#
# Jason Jiang - Created: 2022/05/18
#               Last edited: 2022/05/18
#
# Mideo Lab - Microsporidia text mining
#
# For clean-up stuff I just thought of
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
################################################################################
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(all_refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(all_refs = trimws(all_refs))
################################################################################
COLUMNS_OF_INTEREST <- c('species', 'year_first_described', 'paper_ref',
'paper_title', 'abstract', 'all_refs', 'num_papers')
COLUMNS_TO_CLEAR <-
colnames(abstracts_traits)[!(colnames(abstracts_traits) %in% COLUMNS_OF_INTEREST)]
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits$num_papers[i] > 1 & !str_detect(abstracts_traits$all_refs[i], '^1\\.')) {
# Assign NA value for columns to clear
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
abstracts_traits[i, 'species'] <-
str_c(abstracts_traits$species[i],
' (',
str_extract(abstracts_traits$all_refs[i], '^\\d+(?=\\.)'),
')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits$all_refs[i], '^\\d+\\. +')
}
}
view(filter(abstracts_traits, num_papers > 1))
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits$num_papers[i] > 1) {
abstracts_traits[i, 'species'] <-
str_c(abstracts_traits$species[i],
' (',
str_extract(abstracts_traits$all_refs[i], '^\\d+(?=\\.)'),
')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits$all_refs[i], '^\\d+\\. +')
# if not entry for first paper, clear all columns for COLUMNS_TO_CLEAR an
if (!str_detect(abstracts_traits$all_refs[i], '^1\\.')) {
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
}
}
}
view(abstracts_traits)
view(filter(abstracts_traits, num_papers > 1))
# -----------------------------------------------------------------------------
#
# Miscellaneous cleanup
#
# Jason Jiang - Created: 2022/05/18
#               Last edited: 2022/05/18
#
# Mideo Lab - Microsporidia text mining
#
# For clean-up stuff I just thought of
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
################################################################################
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(all_refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(all_refs = trimws(all_refs))
################################################################################
COLUMNS_OF_INTEREST <- c('species', 'year_first_described', 'paper_ref',
'paper_title', 'abstract', 'all_refs', 'num_papers')
COLUMNS_TO_CLEAR <-
colnames(abstracts_traits)[!(colnames(abstracts_traits) %in% COLUMNS_OF_INTEREST)]
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits$num_papers[i] > 1) {
abstracts_traits[i, 'species'] <-
str_c(abstracts_traits$species[i],
' (',
str_extract(abstracts_traits$all_refs[i], '^\\d+(?=\\.)'),
')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits$all_refs[i], '^\\d+\\. +')
# if not entry for first paper, clear all columns for COLUMNS_TO_CLEAR an
if (!str_detect(abstracts_traits$all_refs[i], '^1\\.')) {
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
}
}
}
view(filter(abstracts_traits, num_papers > 1))
# Save and manually clean up
write_csv(abstracts_traits, '../../data/manually_format_multi_species_papers.csv')
# -----------------------------------------------------------------------------
#
# Miscellaneous cleanup
#
# Jason Jiang - Created: 2022/05/18
#               Last edited: 2022/05/18
#
# Mideo Lab - Microsporidia text mining
#
# For clean-up stuff I just thought of
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
################################################################################
abstracts_traits <- read_csv('../../data/abstracts_traits.csv')
abstracts_traits <- abstracts_traits %>%
rowwise() %>%
mutate(num_papers = length(str_split(all_refs, '\n')[[1]])) %>%
separate_rows(all_refs, sep = '\n') %>%
mutate(all_refs = trimws(all_refs))
################################################################################
COLUMNS_OF_INTEREST <- c('species', 'year_first_described', 'paper_ref',
'paper_title', 'abstract', 'all_refs', 'num_papers')
COLUMNS_TO_CLEAR <-
colnames(abstracts_traits)[!(colnames(abstracts_traits) %in% COLUMNS_OF_INTEREST)]
for (i in 1 : nrow(abstracts_traits)) {
# if num_papers > 1:
#   set columns of non-interest to NA
#   add numbering to species w/ refs numbering
#   add paper_ref
if (abstracts_traits$num_papers[i] > 1) {
abstracts_traits[i, 'species'] <-
str_c(abstracts_traits$species[i],
' (',
str_extract(abstracts_traits$all_refs[i], '^\\d+(?=\\.)'),
')')
abstracts_traits[i, 'paper_ref'] <-
str_remove(abstracts_traits$all_refs[i], '^\\d+\\. +')
# if not entry for first paper, clear all columns for COLUMNS_TO_CLEAR an
if (!str_detect(abstracts_traits$all_refs[i], '^1\\.')) {
abstracts_traits[i, COLUMNS_TO_CLEAR] <-
as.list(rep(NA, length(COLUMNS_TO_CLEAR)))
}
}
}
# Save and manually clean up
write_csv(abstracts_traits, '../../data/manually_format_multi_species_papers.csv')
view(abstracts_traits)
view(filter(abstracts_traits, num_papers > 1))
view(filter(abstracts_traits, num_papers == 1))
580 + 52
