get_nucleus_tp_fp_fn('1', '1')
get_nucleus_tp_fp_fn('1', '2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1; 1')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 1; 2', '1; 1; 2; 1')
get_nucleus_tp_fp_fn('1; 2; 1; 2', '1; 1; 2; 1')
c(1, 1, 2, 2)
c(1, 1, 1, 2)
sort(2, 1, 1, 2)
sort(c(2, 1, 1, 2))
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus %in% pred_nucleus), min(length(nucleus), length(pred_nucleus)))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 2; 1', '2; 1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '2; 1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 2', '1')
get_nucleus_tp_fp_fn('1; 2; 2', '5')
get_nucleus_tp_fp_fn('1; 2', '1; 3; 2')
get_nucleus_tp_fp_fn('1; 2', '1; 3; 1')
x = 0
x + (1 > 2)
x + (1 > 0)
x
x = x + (1 > 0)
x
x
x = x + (1 > 0)
x
x = 0
x = x + 1 %in% c(2, 3, 4)
x
x = x + 1 %in% c(2, 3, 1)
x
x = c(1, 2, 3, 2, 1)
which(x == 1)
which(x == 1)[1]
x[-which(x == 1)[1]]
get_nucleus_tp(pred_nucleus, actual) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
while (length(pred_nucleus) > 0 & length(actual) > 0) {
curr <- pred_nucleus[length(pred_nucleus)]
pred_nucleus <- pred_nucleus[1 : length(pred_nucleus) - 1]
tp <- tp + curr %in% actual
actual <- actual[-which(actual == curr)[1]]
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
curr <- pred_nucleus[length(pred_nucleus)]
pred_nucleus <- pred_nucleus[1 : length(pred_nucleus) - 1]
tp <- tp + curr %in% nucleus
nucleus <- nucleus[-which(nucleus == curr)[1]]
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 2', '1; 3; 1')
x <- c(5, 1, 3, 2, 4)
sort(x)
x <- sort(x)
x
x[-len(x)]
x[-length(x)]
library(tidyverse)
nucleus_preds <- read_csv('~/Desktop/microsporidia_nlp/results')
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv')
view(nucleus_preds)
length(unique(nucleus_preds$species))
nucleus_preds <- filter(nucleus_preds, num_papers < 2)
nucleus_preds <- filter(nucleus_preds, !is.na(pred_nucleus) | !is.na(nucleus))
view(nucleus_preds)
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
pred_nucleus <- sort(pred_nucleus)
nucleus <- sort(nucleus)
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
nucleus_preds <- nucleus_preds %>%
rowwise() %>%
mutate(tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(tp_fp_fn, sep = ',', into = c('tp', 'fp', 'fn'))
nucleus_preds <- nucleus_preds %>%
rowwise() %>%
mutate(tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus))
view(nucleus_preds)
as.numeric(str_extract_all('', '\\d')[[1]])
nucleus_preds <- nucleus_preds %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus))
nucleus_preds <- nucleus_preds %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus))
warnings()
view(nucleus_preds)
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus)) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
view(nucleus_preds)
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus),
nucleus_data_in_text) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
library(tidyverse)
################################################################################
## Evaluate predicted spore nuclei counts
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
pred_nucleus <- sort(pred_nucleus)
nucleus <- sort(nucleus)
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus),
nucleus_data_in_text) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
# 74.5% precision, 40% recall if consider all data
# 74.5% precision, 72.6% recall if only consider entries where nucleus data is
# in abstract
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus)) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
# 74.5% precision, 40% recall if consider all data
# 74.5% precision, 72.6% recall if only consider entries where nucleus data is
# in abstract
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
view(nucleus_preds)
to_check <- filter(nucleus_preds, fp > 1 | fn > 1)
view(to_check)
to_check <- filter(nucleus_preds, tp < 1 | fp > 0 | fn > 0)
view(to_check)
getcwd()
getpwd()
cwd()
pwd()
getwd()
write_csv(to_check, 'nucleus_check.csv')
## Evaluate predicted spore nuclei counts
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
pred_nucleus <- sort(pred_nucleus)
nucleus <- sort(nucleus)
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus)) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
# 74.5% precision, 40% recall if consider all data
# 74.5% precision, 72.6% recall if only consider entries where nucleus data is
# in abstract
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
to_check <- filter(nucleus_preds, tp < 1 | fp > 0 | fn > 0)
write_csv(to_check, 'nucleus_check.csv')
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus),
nucleus_data_in_text) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
# 74.5% precision, 40% recall if consider all data
# 74.5% precision, 72.6% recall if only consider entries where nucleus data is
# in abstract
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
to_check <- filter(nucleus_preds, tp < 1 | fp > 0 | fn > 0)
view(to_check)
library(tidyverse)
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
pred_nucleus <- sort(pred_nucleus)
nucleus <- sort(nucleus)
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp(c(1, 1), c(1, 2))
2 - 1
2 - 1
