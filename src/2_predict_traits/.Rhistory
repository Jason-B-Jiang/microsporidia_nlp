}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site))
view(microsp_infection_preds)
str_remove('intestines (lamina propria)', '.+(?= \\()')
str_remove('intestines (lamina propria)', ' ?\\(.+\\)')
lower('HELLO')
?str_detect
tolower('HELLO. I am there')
infection_sites_in_abstract <- function(title_abstract, infection_site) {
infection_site <- sapply(str_split(infection_site, '; ')[[1]],
function(x) {tolower(str_remove(x, ' ?\\(.+\\)'))})
return(any(str_detect(tolower(title_abstract), infection_site)))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site),
infection_site_in_abstract = infection_sites_in_abstract(title_abstract, infection_site))
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
view(microsp_infection_preds)
x = filter(microsp_infection_preds, infection_site_in_abstract)
x
view(x)
infection_precision <-
sum(x$tp) / (sum(x$tp) + sum(x$fp))
infection_recall <-
sum(x$tp) / (sum(x$tp) + sum(x$fn))
view(microsp_locality_preds)
view(filter(microsp_locality_preds, regions_in_abstract))
write_csv(filter(microsp_locality_preds, regions_in_abstract), 'check_loc.csv')
getwd()
view(microsp_infection_preds)
view(x)
extract_pt_length_value <- Vectorize(function(pred_pt) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pred_pt, '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
format_recorded_pt_length <- Vectorize(function(pt_avg) {
as.numeric(str_split(pt_avg, ' ')[[1]][1])
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = as.numeric(is.na(pred_pt_formatted) & !is.na(pt_avg_formatted)))
pt_len_precision <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fp))
pt_len_recall <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fn))
view(pt_len_preds)
library(tidyverse)
x = '1 (normal spore); 2 (binucleate spore); 1 (microspore)'
x
str_extract_all(x, '\\d')[[1]]
as.numeric(str_extract_all(x, '\\d')[[1]])
x = '1 (c1); 2 (c2); 1 (c3)'
str_split(x, '; ')[[1]]
str_remove_all(str_split(x, '; ')[[1]], ' ?\\(?.*')
str_remove_all(str_split(x, '; ')[[1]], ' \\(.*')
str_remove_all(str_split('1', '; ')[[1]], ' \\(.*')
str_remove_all(str_split(x, '; ')[[1]], ' \\(.*')
as.numeric(str_remove_all(str_split(x, '; ')[[1]], ' \\(.*'))
nucleus <- '1 (c1)'
as.numeric(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*'))
nucleus <- '1 (macrospore); 2 (meiospore)'
as.numeric(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*'))
nucleus <- '1 (macrospore); 2 (meiospore; 3 (c3))'
as.numeric(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*'))
x = c(1)
y = c(1 ,2)
x == y
x == y
max(sum(x == y), len(x))
max(sum(x == y), length(x))
max(sum(x == y), length(x))
y = c(2, 2)
max(sum(x == y), length(x))
x
y
min(sum(x == y), length(x))
y = c(1, 2, 3)
min(sum(x == y), length(x))
c(1, 2, 1) == c(2, 1)
x = c(1, 2, 1)
y = c(1, 2)
x == y
sum(x == y)
min(sum(x == y), length(y))
str_c('hi', 'there', 'buddy')
str_c('hi', 'there', 'buddy', sep = ', ')
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- as.numeric(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*'))
tp = min(sum(nucleus == pred_nucleus), length(nucleus))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('', '')
pred_nucleus = ''
nucleus = ''
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- as.numeric(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*'))
pred_nucleus
nucleus
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
nucleus
nucleus = ''
str_split(nucleus, '; ')[[1]]
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
as.numeric('')
as.numeric(str_extract_all('', '\\d')[[1]])
x = numeric()
x
pred_nucleus = ''
nucleus = ''
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- ifelse(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*') == '',
numeric(), as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]]))
pred_nucleus
nucleus
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
nucleus = ''
nucleus = ''
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*') == ''
numeric()
nucleus <- ifelse(str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*') == '',
numeric(), as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]]))
nucleus = ''
str_split(nucleus, '; ')[[1]]
str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
if (nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
if (nucleus == '') {  # writing this as an ifelse() function wasn't working
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus == pred_nucleus), length(nucleus))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('', '')
get_nucleus_tp_fp_fn('1', '')
get_nucleus_tp_fp_fn('1', '1')
get_nucleus_tp_fp_fn('1', '1; 2')
length('')
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus == pred_nucleus), length(nucleus))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
length('')
get_nucleus_tp_fp_fn('1', '1; 2')
get_nucleus_tp_fp_fn('1; 1', '1; 2')
get_nucleus_tp_fp_fn('1; 1', '1; 2; 1')
get_nucleus_tp_fp_fn('', '1 (c1); 2 (c2); 1 (c3)')
get_nucleus_tp_fp_fn('1', '1 (c1); 2 (c2); 1 (c3)')
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus == pred_nucleus), min(length(nucleus), length(pred_nucleus)))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1', '1 (c1); 2 (c2); 1 (c3)')
get_nucleus_tp_fp_fn('1', '1 ')
get_nucleus_tp_fp_fn('1', '')
get_nucleus_tp_fp_fn('1', '1; 1')
get_nucleus_tp_fp_fn('1; 1', '1; 1')
get_nucleus_tp_fp_fn('1; 1; 2', '1; 2; 1')
x %in% y
sum(x %in% y)
x = c(1, 1, 2)
y = c(1, 2, 1)
x %in% y
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus %in %pred_nucleus), min(length(nucleus), length(pred_nucleus)))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 1; 2', '1; 2; 1')
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus %in% pred_nucleus), min(length(nucleus), length(pred_nucleus)))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 1; 2', '1; 2; 1')
get_nucleus_tp_fp_fn('1; 1; 2', '1; 2')
get_nucleus_tp_fp_fn('1; 1; 2', '2')
get_nucleus_tp_fp_fn('1; 1; 2', '')
get_nucleus_tp_fp_fn('4', '')
get_nucleus_tp_fp_fn('1', '')
get_nucleus_tp_fp_fn('', '1')
get_nucleus_tp_fp_fn('1', '1')
get_nucleus_tp_fp_fn('1', '2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1; 1')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 1; 2', '1; 1; 2; 1')
get_nucleus_tp_fp_fn('1; 2; 1; 2', '1; 1; 2; 1')
c(1, 1, 2, 2)
c(1, 1, 1, 2)
sort(2, 1, 1, 2)
sort(c(2, 1, 1, 2))
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = min(sum(nucleus %in% pred_nucleus), min(length(nucleus), length(pred_nucleus)))
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 2; 1', '2; 1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 1; 1', '2; 1; 1; 2')
get_nucleus_tp_fp_fn('1; 2; 2', '1')
get_nucleus_tp_fp_fn('1; 2; 2', '5')
get_nucleus_tp_fp_fn('1; 2', '1; 3; 2')
get_nucleus_tp_fp_fn('1; 2', '1; 3; 1')
x = 0
x + (1 > 2)
x + (1 > 0)
x
x = x + (1 > 0)
x
x
x = x + (1 > 0)
x
x = 0
x = x + 1 %in% c(2, 3, 4)
x
x = x + 1 %in% c(2, 3, 1)
x
x = c(1, 2, 3, 2, 1)
which(x == 1)
which(x == 1)[1]
x[-which(x == 1)[1]]
get_nucleus_tp(pred_nucleus, actual) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
while (length(pred_nucleus) > 0 & length(actual) > 0) {
curr <- pred_nucleus[length(pred_nucleus)]
pred_nucleus <- pred_nucleus[1 : length(pred_nucleus) - 1]
tp <- tp + curr %in% actual
actual <- actual[-which(actual == curr)[1]]
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
curr <- pred_nucleus[length(pred_nucleus)]
pred_nucleus <- pred_nucleus[1 : length(pred_nucleus) - 1]
tp <- tp + curr %in% nucleus
nucleus <- nucleus[-which(nucleus == curr)[1]]
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp_fp_fn('1; 2', '1; 3; 1')
