while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_nucleus_tp(c(1, 1), c(1, 2))
2 - 1
2 - 1
library(tidyverse)
get_infection_site_tp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
infection_sites_in_abstract <- function(title_abstract, infection_site) {
infection_site <- sapply(str_split(infection_site, '; ')[[1]],
function(x) {tolower(str_remove(x, ' ?\\(.+\\)'))})
return(any(str_detect(tolower(title_abstract), infection_site)))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv')
view(microsp_infection_preds)
str_split(NA, '; ')[[1]]
character()
character(0)
length(character())
character(0) == c('a', 'b', 'c')
intersect(c('a', 'b', 'd'), c('b', 'd', 'e', 'f'))
?ifelse
character()
intersect(c(), c('a', 'b'))
length(intersect(c(), c('a', 'b')))
length(intersect(c(), c('a', 'b'))) - length(c())
view(microsp_infection_preds)
get_infection_tp_fp_fn <- function(recorded, predicted) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
recorded <- ifelse(!is.na(recorded), str_split(recorded, '; ')[[1]],
character())
predicted <- ifelse(!is.na(predicted), str_split(recorded, '; ')[[1]],
character())
tp <- length(intersect(recorded, predicted))
fp <- length(predicted) - tp
fn <- length(recorded) - tp
return(str_c(tp, fp, fn, sep = ','))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))
view(microsp_infection_preds)
recorded = 'Epithelium; colon'
predicted = 'Epithelium; Cells'
recorded <- ifelse(!is.na(recorded), str_split(recorded, '; ')[[1]],
character())
recorded
str_split(recorded, '; ')[[1]]
str_split(recorded, '; ')
recorded
recorded = 'Epithelium; colon'
str_split(recorded, '; ')
str_split(recorded, '; ')[[1]]
predicted = 'Epithelium; Cells'
!is.na(recorded)
str_split(recorded, '; ')[[1]]
recorded <- ifelse(!is.na(recorded), str_split(recorded, '; ')[[1]],
character())
predicted <- ifelse(!is.na(predicted), str_split(predicted, '; ')[[1]],
character())
recorded
predicted
predicted = 'Epithelium; Cells'
recorded = 'Epithelium; colon'
if (is.na(recorded)) {
recorded <- character()
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(predicted)) {
predicted <- character()
} else {
predicted <- str_split(predicted, '; ')[[1]]
}
recorded
predicted
tp <- length(intersect(recorded, predicted))
fp <- length(predicted) - tp
fn <- length(recorded) - tp
tp
fp
fn
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))
view(microsp_infection_preds)
recorded
predicted
tp <- length(intersect(recorded, predicted))
fp <- length(predicted) - tp
fn <- length(recorded) - tp
tp
fp
fn
get_infection_tp_fp_fn('Epithelium; colon', 'Epithelium; Cells')
recorded = 'Epithelium; colon'
predicted = 'Epithelium; Cells'
if (is.na(recorded)) {
recorded <- character()
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(predicted)) {
predicted <- character()
} else {
predicted <- str_split(predicted, '; ')[[1]]
}
recorded
predicted
intersect(recorded, predicted)
tp <- length(intersect(recorded, predicted))
tp
length(predicted)
fp <- length(predicted) - tp
fn <- length(recorded) - tp
fp
fn
get_infection_tp_fp_fn <- function(recorded, predicted) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- character()
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(predicted)) {
predicted <- character()
} else {
predicted <- str_split(predicted, '; ')[[1]]
}
tp <- length(intersect(recorded, predicted))
fp <- length(predicted) - tp
fn <- length(recorded) - tp
return(str_c(tp, fp, fn, sep = ','))
}
get_infection_tp_fp_fn('Epithelium; colon', 'Epithelium; Cells')
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))
view(microsp_infection_preds)
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))  %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
view(microsp_infection_preds)
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
view(microsp_infection_preds)
x = c('hi', 'there')
y = 'Hi, do you see a bear over there?'
tolower(y)
tolower(c("Hi", "WASSUP", "bro"))
?str_detect
x = tolower(c('hi', 'therE'))
y = tolower('Hi, do you see a bear over there?')
x
y
str_detect(y, x)
x <- c('hi', 'sandiasnda')
str_detect(y, x)
all(str_detect(y, x))
all_recorded_sites_in_text <- function(recorded, text) {
recorded <- tolower(str_split(recorded, '; ')[[1]])
text <- tolower(text)
return(all(str_detect(text, recorded)))
}
all_recorded_sites_in_text <- function(recorded, text) {
recorded <- tolower(str_split(recorded, '; ')[[1]])
text <- tolower(text)
return(all(str_detect(text, recorded)))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
filter(!all_recorded_sites_in_text(infection_site, abstract)) %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))  %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
view(microsp_infection_preds)
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
filter(all_recorded_sites_in_text(infection_site, abstract)) %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))  %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
to_check <- filter(microsp_infection_preds, tp < 1 | fp > 0 | fn > 0)
view(to_check)
write_csv(to_check, 'infection_check.csv')
get_infection_tp_fp_fn <- function(recorded, predicted) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- character()
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
if (is.na(predicted)) {
predicted <- character()
} else {
predicted <- str_split(predicted, '; ')[[1]]
}
tp <- length(intersect(recorded, predicted))
fp <- length(predicted) - tp
fn <- length(recorded) - tp
return(str_c(tp, fp, fn, sep = ','))
}
all_recorded_sites_in_text <- function(recorded, text) {
recorded <- tolower(str_split(recorded, '; ')[[1]])
text <- tolower(text)
return(all(str_detect(text, recorded)))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
# for now, focus on cases where we're confident all recorded sites are in
# abstract/title
filter(all_recorded_sites_in_text(infection_site, abstract)) %>%
mutate(tp_fp_fn = get_infection_tp_fp_fn(infection_site_normalized,
pred_infection_site))  %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
to_check <- filter(microsp_infection_preds, tp < 1 | fp > 0 | fn > 0)
write_csv(to_check, 'infection_check.csv')
################################################################################
## Evaluate predicted spore nuclei counts
get_nucleus_tp <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
tp <- 0
pred_nucleus <- sort(pred_nucleus)
nucleus <- sort(nucleus)
while (length(pred_nucleus) > 0 & length(nucleus) > 0) {
if (pred_nucleus[length(pred_nucleus)] == nucleus[length(nucleus)]) {
# if last elements of both vectors are equal, add 1 to true positive count
# and remove last elements of both vectors
tp <- tp + 1
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
nucleus <- nucleus[-length(nucleus)]
} else if (pred_nucleus[length(pred_nucleus)] > nucleus[length(nucleus)]) {
# last element of first vector is greater than last element of second
# vector, remove last element of first vector
pred_nucleus <- pred_nucleus[-length(pred_nucleus)]
} else {
# last element of second vector is greater than last element of first
# vector, remove last element of second vector
nucleus <- nucleus[-length(nucleus)]
}
}
return(tp)
}
get_nucleus_tp_fp_fn <- function(pred_nucleus, nucleus) {
# ---------------------------------------------------------------------------
# Return comma separated string of number of true positive, false positive,
# false negative spore nucleus predictions.
#
# Inputs:
#   pred_nucleus: predicted number of nuclei for each spore type, generated by
#   predict_spore_nucleus.py
#
#   nucleus: recorded nucleus data for Microsporidia spores
#
# ---------------------------------------------------------------------------
# Just treat spore nucleus predictions as vectors of 1s and 2s
# I'll explain this more in lab meeting
pred_nucleus <- as.numeric(str_extract_all(pred_nucleus, '\\d')[[1]])
nucleus <- str_remove_all(str_split(nucleus, '; ')[[1]], ' \\(.*')
# writing this as an ifelse() function wasn't working for some reason
if (length(nucleus) == 1 & nucleus == '') {
nucleus <- numeric()
} else {
nucleus <- as.numeric(nucleus)
}
tp = get_nucleus_tp(pred_nucleus, nucleus)
fp = length(pred_nucleus) - tp
fn = length(nucleus) - tp
return(str_c(tp, fp, fn, sep = ','))
}
nucleus_preds <- read_csv('/home/boognish/Desktop/microsporidia_nlp/results/microsp_spore_nuclei_predictions.csv') %>%
filter(num_papers < 2, !is.na(pred_nucleus) | !is.na(nucleus),
nucleus_data_in_text) %>%
rowwise() %>%
mutate(pred_nucleus = ifelse(!is.na(pred_nucleus), pred_nucleus, ''),
nucleus = ifelse(!is.na(nucleus), nucleus, ''),
tp_fp_fn = get_nucleus_tp_fp_fn(pred_nucleus, nucleus)) %>%
separate(col= tp_fp_fn, into = c('tp', 'fp', 'fn'), sep = ',') %>%
mutate(tp = as.integer(tp),
fp = as.integer(fp),
fn = as.integer(fn))
# 74.5% precision, 40% recall if consider all data
# 74.5% precision, 66.4% recall if only consider entries where nucleus data is
# in abstract
nucleus_precision <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fp))
nucleus_recall <-
sum(nucleus_preds$tp) / (sum(nucleus_preds$tp) + sum(nucleus_preds$fn))
to_check <- filter(nucleus_preds, tp < 1 | fp > 0 | fn > 0)
write_csv(to_check, 'nucleus_check.csv')
library(tidyverse)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv')
view(microsp
)
view(microsp_locality_preds)
x <- "Australia; Russia (Moscow); United States (Utah | Florida)"
x <- str_split(x, '; ')[[1]]
x
regions <- str_extract(x, '.+ ?\\(?')
regions
regions <- str_extract(x, '[[A-Za-z]]+ ?\\(?')
regions
regions <- str_extract(x, '[[A-Za-z ]]+ ?\\(?')
regions
regions <- str_split(x, ' ?\\(')
regions
regions <- str_split(x, ' ?\\(')[[1]]
regions
regions
regions <- str_split(x, ' ?\\(')[[1]]
regions
x
regions <- str_split(x, ' ?\\(')
regions
regions <- sapply(x, function(i) {str_split(i, ' ?\\(')}[[1]])
regions
regions <- sapply(x, function(i) {str_split(i, ' ?\\(')}[[1]][1])
regions
str_split('United States (Utah | Florida)', ' ?\\(')[[1]]
str_split('United States (Utah | Florida)', ' ?\\(')[[1]][1]
length(regions)
regions[1]
regions[2]
regions[3]
regions
regions
locs
x
subregions <- lapply(x, function(i) {str_extract(i, '\\(.+\\)')})
subregions
subregions <- lapply(x, function(i) {str_split(str_extract(i, '\\(.+\\)'), ' \\| ')[[1]]})
subregions
subregions <- lapply(x, function(i) {str_split(str_extract(i, '\\(.+\\)'), ' \\| ')[[1]]})
subregions[[3]]
class(subregions[[3]])
subregions <- lapply(x, function(i) {str_split(str_extract(i, '(?<=\\().+(?=\\))'), ' \\| ')[[1]]})
subregions
locs = x
locs
subregions <-
lapply(locs, function(x) {str_split(str_extract(x, '(?<=\\().+(?=\\))'), ' \\| ')[[1]]}) %>%
lapply(function(x) {ifelse(is.na(x), c(), x)})
subregions <-
lapply(locs, function(x) {str_split(str_extract(x, '(?<=\\().+(?=\\))'), ' \\| ')[[1]]})
subregions
lapply(subregions, function(x) {ifelse(is.na(x), c(), x)})
regions <- sapply(locs, function(x) {str_split(x, ' ?\\(')[[1]][1]})
subregions <-
lapply(locs, function(x) {str_split(str_extract(x, '(?<=\\().+(?=\\))'), ' \\| ')[[1]]})
regions
subregions
names(subregions) <- regions
subregions
subregions[['Australia']]
subregions[['United States']]
str_detect('hello', '')
lapply(subregions, function(x) {ifelse(is.na(x), character(0), x)})
subregions
lapply(subregions, function(x) {ifelse(is.na(x), c(), x)})
lapply(subregions, function(x) {ifelse(is.na(x), character(), x)})
for (region in subregions) {
if (is.na(subregions[[region]])) {
print(region)
}
}
for (region in names(subregions)) {
if (is.na(subregions[[region]])) {
print(region)
}
}
lapply(subregions, function(x) {ifelse(is.na(x), character(), x)})
for (region in names(subregions)) {
if (is.na(subregions[[region]])) {
print(region)
}
}
length(NA)
A
NA
