get_locality_fn('Acarispora (); Chytridiopsida ()', 'Germany (Greifswald)')
get_region_subregions('Acarispora (); Chytridiopsida ()')
get_region_subregions('Germany (Greifswald)')
get_locality_fn <- function(pred, recorded) {
if (is.na(pred)) {
# if no predicted regions/subregions, then num false pos is all recorded
# regions and subregions
return(get_num_regions_and_subregions(recorded))
} else if (is.na(recorded)) {
return(0)
}
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(pred)
fn <- 0
for (region in names(recorded)) {
if (!(region %in% names(pred))) {
# region wasn't in predictions, so count as false negative
# all associated subregions are also false negatives
fn <- fn + 1
fn <- fn + length(recorded[[region]])
} else {
for (subregion in recorded[[region]]) {
if (!(subregion %in% pred[[region]])) {
# recorded subregion wasn't in predicted subregions for this region
fn <- fn + 1
}
}
}
}
return(fn)
}
get_locality_fn('Acarispora (); Chytridiopsida ()', 'Germany (Greifswald)')
pred = 'Acarispora (); Chytridiopsida ()'
recorded = 'Germany (Greifswald)'
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(pred)
pred
recorded
get_locality_fn <- function(pred, recorded) {
if (is.na(pred)) {
# if no predicted regions/subregions, then num false pos is all recorded
# regions and subregions
return(get_num_regions_and_subregions(recorded))
} else if (is.na(recorded)) {
return(0)
}
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(recorded)
fn <- 0
for (region in names(recorded)) {
if (!(region %in% names(pred))) {
# region wasn't in predictions, so count as false negative
# all associated subregions are also false negatives
fn <- fn + 1
fn <- fn + length(recorded[[region]])
} else {
for (subregion in recorded[[region]]) {
if (!(subregion %in% pred[[region]])) {
# recorded subregion wasn't in predicted subregions for this region
fn <- fn + 1
}
}
}
}
return(fn)
}
get_locality_fn('Acarispora (); Chytridiopsida ()', 'Germany (Greifswald)')
get_locality_tp('Acarispora (); Chytridiopsida ()', 'Germany (Greifswald)')
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized))
locality_precision <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fp))
infection_recall <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fn))
view(microsp_locality_preds)
microsp_locality_preds <- microsp_locality_preds %>%
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()', 'Russia (Siberia)', locality_normalized))
view(microsp_locality_preds)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized))
locality_precision <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fp))
locality_recall <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fn))
locality_precision
locality_recall
view(microsp_locality_preds)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized))
# 16% precision, 40% recall
locality_precision <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fp))
locality_recall <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fn))
view(microsp_locality_preds)
str_detect(NULL, 'x')
str_detect('this is a test', c('this', 'hello', 'test'))
get_region_subregions('Russia (Novosibirsk, Western Siberia)')
is.null(x[['KDKD']])
str_detect('this is a test', NULL)
## Evaluate predicted localities
get_region_subregions <- function(locality) {
locality <- str_split(locality, '; ')[[1]]
region_subregions <- list()
for (loc in locality) {
region <- str_extract(loc, '.+(?= \\()')[[1]]
subregions <- str_extract(loc, '(?<=\\().+?(?=\\))')
if (!is.na(subregions)) {
region_subregions[[region]] <- str_split(subregions, ' \\| ')[[1]]
} else {
region_subregions[[region]] <- character(0)
}
}
return(region_subregions)
}
get_num_regions_and_subregions <- function(locality) {
if (is.na(locality)) {
return(0)
}
locality <- get_region_subregions(locality)
# number of regions + number of all subregions
return(length(locality) + sum(unlist(lapply(locality, length))))
}
get_locality_tp <- function(pred, recorded) {
if (is.na(pred) | is.na(recorded)) {
return(0)
}
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(recorded)
tp <- 0
for (region in names(recorded)) {
# true positive if recorded region among predicted regions
tp <- tp + (region %in% names(pred))
for (subregion in recorded[[region]]) {
# true positive subregion if any of the predicted subregions for this
# region are a substring of the recorded subregion
if (!is.null(pred[[region]])) {
tp <- tp + any(str_detect(subregion, pred[[region]]))
}
}
}
return(tp)
}
get_locality_fp <- function(pred, recorded) {
if (is.na(pred)) {
return(0)
} else if (is.na(recorded)) {
# if no recorded localities, then all predicted regions and subregions are
# false pos
return(get_num_regions_and_subregions(pred))
}
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(recorded)
fp <- 0
for (region in names(pred)) {
if (!(region %in% names(recorded))) {
# predicted region was not a recorded region, so count as false pos
fp <- fp + 1
# because predicted region is incorrect, all predicted subregions are
# also false pos
fp <- fp + length(pred[[region]])
} else {
# check if predicted subregions are correct for this correctly predicted
# region
for (subregion in pred[[region]]) {
fp <- fp + !any(sapply(recorded[[region]],
function(x) {str_detect(x, subregion)}))
}
}
}
return(fp)
}
get_locality_fn <- function(pred, recorded) {
if (is.na(pred)) {
# if no predicted regions/subregions, then num false pos is all recorded
# regions and subregions
return(get_num_regions_and_subregions(recorded))
} else if (is.na(recorded)) {
return(0)
}
pred <- get_region_subregions(pred)
recorded <- get_region_subregions(recorded)
fn <- 0
for (region in names(recorded)) {
if (!(region %in% names(pred))) {
# region wasn't in predictions, so count as false negative
# all associated subregions are also false negatives
fn <- fn + 1
fn <- fn + length(recorded[[region]])
} else {
for (subregion in recorded[[region]]) {
if (!(subregion %in% pred[[region]])) {
# none of the predicted subregions for this region are a substring
# of the recorded subregion, so count as false neg
fn <- fn + !any(str_detect(subregion, pred[[region]]))
}
}
}
}
return(fn)
}
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized))
locality_precision <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fp))
locality_recall <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fn))
view(microsp_locality_preds)
locality_precision <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fp))
locality_recall <-
sum(microsp_locality_preds$tp) / (sum(microsp_locality_preds$tp) + sum(microsp_locality_preds$fn))
view(microsp_locality_preds)
str_detect('hello there', c('hello', 'there', 'friends'))
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
ungroup() %>%
mutate(localities_in_abstract = ifelse(!is.na(locality) & tp == 0,
any(str_detect(title_abstract,
str_extract(locality, '.+(?= \\()')[[1]])),
1))
view(microsp_locality_preds)
str_extract_all('Germany (Greifswald)', '.+(?= \\()')
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
ungroup() %>%
mutate(localities_in_abstract = ifelse(!is.na(locality) & tp == 0,
any(str_detect(title_abstract,
str_extract_all(locality_normalized, '.+(?= \\()')[[1]])),
1))
view(microsp_locality_preds)
sum(microsp_locality_preds$localities_in_abstract)
view(microsp_locality_preds)
str_extract_all('Germany (Greifswald); Hi (there)', '.+(?= \\()')
locality <- 'Germany (Greifswald); Hi (there)'
locality <- str_split(locality, '; ')[[1]]
regions <- sapply(locality, function(x) {str_extract(x, '.+(?= \\()')[[1]]})
regions
regions[2]
check_if_regions_in_abstract <- function(title_abstract, locality) {
if (is.na(locality)) {
return(FALSE)
}
locality <- str_split(locality, '; ')[[1]]
regions <- sapply(locality, function(x) {str_extract(x, '.+(?= \\()')[[1]]})
return(any(str_detect(title_abstract, regions)))
}
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
mutate(check_if_regions_in_abstract(title_abstract, locality_normalized))
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Tom River, Tomsk, Western Siberia)',
'Russia (Tom River, Tomsk, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
mutate(check_if_regions_in_abstract(title_abstract, locality_normalized))
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Tom River, Tomsk, Western Siberia)',
'Russia (Tom River, Tomsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Krotovo Lake) located near the village of Troitskoe, Novosibirsk region, Western Siberia) Russia',
'Russia (Krotovo Lake, Troitskoe, Novosibirsk region, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
mutate(check_if_regions_in_abstract(title_abstract, locality_normalized))
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Tom River, Tomsk, Western Siberia)',
'Russia (Tom River, Tomsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Krotovo Lake, Troitskoe, Novosibirsk, Western Siberia)',
'Russia (Krotovo Lake, Troitskoe, Novosibirsk region, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
mutate(check_if_regions_in_abstract(title_abstract, locality_normalized))
view(microsp_locality_preds)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv') %>%
# manual fix for correctly associating Siberia with Russia
mutate(locality_normalized = ifelse(locality_normalized == 'Siberia ()',
'Russia (Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == 'Western Siberia (Novosibirsk)',
'Russia (Novosibirsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Tom River, Tomsk, Western Siberia)',
'Russia (Tom River, Tomsk, Western Siberia)',
locality_normalized),
locality_normalized = ifelse(locality_normalized == '(pond (Krotovo Lake, Troitskoe, Novosibirsk, Western Siberia)',
'Russia (Krotovo Lake, Troitskoe, Novosibirsk region, Western Siberia)',
locality_normalized)) %>%
rowwise() %>%
mutate(tp = get_locality_tp(pred_locality, locality_normalized),
fp = get_locality_fp(pred_locality, locality_normalized),
fn = get_locality_fn(pred_locality, locality_normalized)) %>%
mutate(regions_in_abstract = check_if_regions_in_abstract(title_abstract, locality_normalized))
view(microsp_locality_preds)
view(filter(microsp_locality_preds, !regions_in_abstract, tp == 0))
view(filter(microsp_locality_preds, !is.na(locality)))
276 / 522
x = filter(microsp_locality_preds, regions_in_abstract)
sum(x$tp) / (sum(x$tp) + sum(x$fp))
sum(x$tp) / (sum(x$tp) + sum(x$fn))
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site))
# 28% precision, 36% recall
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
get_infection_site_tp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site))
view(microsp_infection_preds)
str_remove('intestines (lamina propria)', '.+(?= \\()')
str_remove('intestines (lamina propria)', ' ?\\(.+\\)')
lower('HELLO')
?str_detect
tolower('HELLO. I am there')
infection_sites_in_abstract <- function(title_abstract, infection_site) {
infection_site <- sapply(str_split(infection_site, '; ')[[1]],
function(x) {tolower(str_remove(x, ' ?\\(.+\\)'))})
return(any(str_detect(tolower(title_abstract), infection_site)))
}
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site),
infection_site_in_abstract = infection_sites_in_abstract(title_abstract, infection_site))
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
view(microsp_infection_preds)
x = filter(microsp_infection_preds, infection_site_in_abstract)
x
view(x)
infection_precision <-
sum(x$tp) / (sum(x$tp) + sum(x$fp))
infection_recall <-
sum(x$tp) / (sum(x$tp) + sum(x$fn))
view(microsp_locality_preds)
view(filter(microsp_locality_preds, regions_in_abstract))
write_csv(filter(microsp_locality_preds, regions_in_abstract), 'check_loc.csv')
getwd()
view(microsp_infection_preds)
view(x)
extract_pt_length_value <- Vectorize(function(pred_pt) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pred_pt, '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
format_recorded_pt_length <- Vectorize(function(pt_avg) {
as.numeric(str_split(pt_avg, ' ')[[1]][1])
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = as.numeric(is.na(pred_pt_formatted) & !is.na(pt_avg_formatted)))
pt_len_precision <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fp))
pt_len_recall <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fn))
view(pt_len_preds)
