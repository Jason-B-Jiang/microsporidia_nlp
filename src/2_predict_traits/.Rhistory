for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[i], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
return(str_c(pt_coil_preds, '; '))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil))) %>%
# pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(pt_coil_preds)
x = '5-6'
convert_pt_coil_ranges_to_medians(x)
convert_pt_coil_ranges_to_medians <- function(pred_pt_coil_formatted) {
pt_coil_preds <- str_split(pred_pt_coil_formatted, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[i], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
return(str_c(pt_coil_preds, collapse = '; '))
}
convert_pt_coil_ranges_to_medians(x)
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg)))
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(pt_coil_preds)
get_pt_coil_precision <- function(pt_coils_avg, pred_pt_coil_avg) {
pt_coils_avg <- str_split(pt_coils_avg, '; ')[[1]]
pred_pt_coil_avg <- str_split(pred_pt_coil_avg, '; ')[[1]]
true_pos <- length(pred_pt_coil_avg[pred_pt_coil_avg %in% pt_coils_avg])
false_pos <- length(pred_pt_coil_avg[!(pred_pt_coil_avg %in% pt_coils_avg)])
return(true_pos / (true_pos + false_pos))
}
get_pt_coil_recall <- function(pt_coils_avg, pred_pt_coil_avg) {
pt_coils_avg <- str_split(pt_coils_avg, '; ')[[1]]
pred_pt_coil_avg <- str_split(pred_pt_coil_avg, '; ')[[1]]
true_pos <- length(pred_pt_coil_avg[pred_pt_coil_avg %in% pt_coils_avg])
false_neg <- length(pt_coils_avg[!(pt_coils_avg %in% pred_pt_coil_avg)])
return(true_pos / (true_pos + false_neg))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg)) %>%
mutate(precision = get_pt_coil_precision(pt_coils_avg, pred_pt_coil_avg),
recall = get_pt_coil_recall(pt_coils_avg, pred_pt_coil_avg))
view(pt_coil_preds)
mean(pt_coil_preds$precision)
mean(pt_coil_preds$recall)
library(tidyverse)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv')
view(microsp_locality_preds)
str_remove('Chytridiopsida ()', ' \\([A-Za-z]+\\)')
str_remove('Chytridiopsida ()', ' \\([[A-Za-z]]+\\)')
str_remove('Chytridiopsida ()', ' \\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', ' \\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', '\\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', '(?<=\\())[A-Za-z]*(?=\\)')
str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))')
str_split(str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('United States (Новая | Новая)', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
library(tidyverse)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv')
view(microsp_locality_preds)
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv')
view(microsp_host_preds)
locality <- "(Near Greifswald) Germany"
pred_locality <- "Chytridiopsida (); Acarispora ()"
locality <- str_split(locality, '; ')[[1]]
pred_locality <- str_split(pred_locality, '; ')[[1]]
false_pos <- c()
locality
pred_locality
for (pred in pred_locality) {
pred_region <- str_remove(pred, ' \\(.*\\)')
pred_subregions <-
str_split(str_extract(pred, '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
print(pred_region)
print(pred_subregions)
print('##################################')
}
view(microsp_host_preds)
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv') %>%
mutate(species_formatted = format_species_name(species)) %>%
rowwise() %>%
mutate(microsp_predicted = check_microsp_prediction(species_formatted, pred_species),
microsp_predicted_2 = check_microsp_prediction(species_formatted, pred_species_2))
format_species_name <- Vectorize(function(species) {
# TODO - allow abbreviated name matches
species <- str_remove(species, '( \\d+| from .+)')
if (str_detect(species, '\\(')) {
alt_name <- str_remove_all(str_extract(species, '\\(=?.+\\)'), '(\\(|\\)|= )')
return(str_c(str_remove(species, ' \\(.+'), '; ', alt_name))
}
return(species)
})
check_microsp_prediction <- function(species, pred_species) {
if (is.na(pred_species)) {
return(FALSE)
}
# make matches case insensitive
species <- tolower(str_split(species, '; ')[[1]])
pred_species <- tolower(str_split(pred_species, '; ')[[1]])
for (sp in species) {
if (any(str_detect(pred_species, sp))) {
return(TRUE)
}
}
return(FALSE)
}
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv') %>%
mutate(species_formatted = format_species_name(species)) %>%
rowwise() %>%
mutate(microsp_predicted = check_microsp_prediction(species_formatted, pred_species),
microsp_predicted_2 = check_microsp_prediction(species_formatted, pred_species_2))
view(microsp_host_preds)
sum(microsp_host_preds$microsp_predicted_2 / nrow(microsp_host_preds))
library(tidyverse)
pt_preds <- read_csv('../../results/microsp_pt_predictions.csv')
view(pt_preds)
x = filter(pt_preds, !is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg))
view(x)
view(select(x, species, title_abstract, pred_pt, pt_max, pt_min, pt_avg))
write_csv(select(x, species, title_abstract, pred_pt, pt_max, pt_min, pt_avg), 'pred_pt_check.csv')
library(tidyverse)
pt_preds <- read_csv('../../results/microsp_pt_predictions.csv')
view(pt_preds)
view(pt_preds)
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg))
view(pt_len_preds)
view(filter(pt_len_preds, !is.na(pt_max) | !is.na(pt_min), is.na(pt_avg))
)
x = c('–', '-', ' to ', '-')
unique(x)
str_extract("polar tube 125 microns", '\\d+\\.?\\d?(–|-| to )?\\d*\\\.?\\d?')
str_extract("polar tube 125 microns", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament measuring 6.136 ± 0.84 µm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament is thin and 25-30 µm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament length was 94.2±11.97μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament is 15 to 32 mu", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament length was 158 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament 80-429 μ", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filaments were about 20 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament measuring 102 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar filament measuring 102 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?')
str_split(
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')
str_split(
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]]
as.numeric(str_split(
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]])
mean(as.numeric(str_split(
str_extract("polar tube is isofilar, 4.5–5.5 μm", '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]]))
extract_pt_length_value <- Vectorize(function(pt_pred) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pt_pred, '\\d+\\.?\\d?(–|-| to )?\\d*\\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pt_pred_formatted = ifelse(is.na(pt_pred), NA, extract_pt_length_value(pt_pred)))
extract_pt_length_value <- Vectorize(function(pred_pt) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pred_pt, '\\d+\\.?\\d?(–|-| to )?\\d*\\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pt_pred_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)))
extract_pt_length_value <- Vectorize(function(pred_pt) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pred_pt, '\\d+\\.?\\d?(–|-| to )?\\d*\\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
extract_pt_length_value <- Vectorize(function(pred_pt) {
# ---------------------------------------------------------------------------
# Extract polar tube length from string where length was found, and convert
# ranges of length to averages.
# ---------------------------------------------------------------------------
mean(as.numeric(
str_split(str_extract(pred_pt, '\\d+\\.?\\d?(–|-| to )?\\d*\\.?\\d?'),
'(–|-| to )')[[1]]
))
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pt_pred_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)))
view(pt_len_preds)
view(select(pt_len_preds, pred_pt, pt_pred_formatted))
(32 + 15) / 2
12*6
12*7
11*7
14*5
view(select(pt_len_preds, pred_pt, pt_pred_formatted))
view(pt_len_preds)
format_recorded_pt_length <- function(pt_avg) {
as.numeric(str_split(pt_avg, ' ')[[1]][1])
}
format_recorded_pt_length <- Vectorize(function(pt_avg) {
as.numeric(str_split(pt_avg, ' ')[[1]][1])
})
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg))
view(pt_len_preds)
view(select(pt_len_preds, pt_avg, pt_avg_formatted))
as.numeric(1 == 2)
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = is.na(pred_pt_formatted & !is.na(pt_avg_formatted)))
view(pt_len_preds)
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = is.na(pred_pt_formatted & !is.na(pt_avg_formatted)))
view(pt_len_preds)
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = as.numeric(is.na(pred_pt_formatted) & !is.na(pt_avg_formatted)))
view(pt_len_preds)
pt_len_precision <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fp))
pt_len_recall <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fn))
pt_len_precision
pt_len_recall
pt_len_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
select(species, title_abstract, pred_pt, pt_max, pt_min, pt_avg) %>%
filter(!is.na(pred_pt) | !is.na(pt_max) | !is.na(pt_min) | !is.na(pt_avg)) %>%
mutate(pred_pt_formatted = ifelse(is.na(pred_pt), NA, extract_pt_length_value(pred_pt)),
pt_avg_formatted = format_recorded_pt_length(pt_avg),
tp = ifelse(!is.na(pred_pt_formatted),
as.numeric(pred_pt_formatted == pt_avg_formatted),
0),
fp = as.numeric(!is.na(pred_pt_formatted) & pred_pt_formatted != pt_avg_formatted),
fn = as.numeric(is.na(pred_pt_formatted) & !is.na(pt_avg_formatted)))
pt_len_precision <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fp))
pt_len_recall <- sum(pt_len_preds$tp) / (sum(pt_len_preds$tp) + sum(pt_len_preds$fn))
sum(pt_len_preds$tp)
sum(pt_len_preds$tp)
sum(pt_len_preds$fp)
# -----------------------------------------------------------------------------
#
# Evaluate accuracy of predicted microsporidia traits
#
# Jason Jiang - Created: 2022/05/17
#               Last edited: 2022/06/10
#
# Mideo Lab - Microsporidia text mining
#
#
# -----------------------------------------------------------------------------
library(tidyverse)
## Evaluate Microsporidia infection site predictions
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv')
view(microsp_infection_preds)
view(filter(microsp_infection_preds, num_papers == 1))
str_detect('hello', c('hell', 'eh', 'mo', 'lo'))
str_detect(c('hello', 'there'), c('hell', 'eh', 'mo', 'lo'))
get_infection_site_tp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
get_infection_site_tp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- ''
}
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- ''
}
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(recorded)) {
recorded <- ''
}
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
get_infection_site_tp('adipose; ovary', 'adipose')
get_infection_site_tp('adipose; ovary', NA)
get_infection_site_tp(NA, 'SVs')
get_infection_site_fp('adipose', 'adipose; hypoderm')
get_infection_site_fp('adipose', 'adipose')
get_infection_site_fp(NA, 'adipose')
get_infection_site_fp(NA, NA)
get_infection_site_fp('adipose', NA)
get_infection_site_fn('adipose', NA)
get_infection_site_fn('adipose'; 'adipose; hypoderm')
get_infection_site_fn('adipose', 'adipose; hypoderm')
get_infection_site_fn(NA, 'adipose; hypoderm')
get_infection_site_fn(NA, 'adipose; hypoderm')
str_split('', '; ')[[1]]
character(0)
'hello' %in% character(0)
'' %in% character(0)
str_split(character(0), '; ')[[1]]
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
recorded <- str_split(recorded, '; ')[[1]]
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
get_infection_site_fn(NA, 'adipose; hypoderm')
get_infection_site_tp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[recorded %in% pred]))
}
get_infection_site_fp <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(pred[!(pred %in% recorded)]))
}
get_infection_site_fn <- function(recorded, pred) {
# ---------------------------------------------------------------------------
# Docstring goes here
# ---------------------------------------------------------------------------
if (is.na(pred)) {
return(0)
}
if (is.na(recorded)) {
recorded <- character(0)
} else {
recorded <- str_split(recorded, '; ')[[1]]
}
pred <- str_split(pred, '; ')[[1]]
return(length(recorded[!(recorded %in% pred)]))
}
get_infection_site_fn(NA, 'adipose; hypoderm')
get_infection_site_fn('adipose', 'adipose; hypoderm')
get_infection_site_fn('adipose; hypoderm; midgut', 'adipose; hypoderm')
get_infection_site_fp('adipose', 'adipose; hypoderm; gut')
get_infection_site_tp('adipose', 'adipose; hypoderm; gut')
get_infection_site_tp('adipose; gut', 'adipose; hypoderm; gut')
microsp_infection_preds <- read_csv('../../results/microsp_infection_site_predictions.csv') %>%
filter(num_papers < 2) %>%  # look at species with only 1 paper for now
rowwise() %>%
mutate(tp = get_infection_site_tp(infection_site_normalized, pred_infection_site),
fp = get_infection_site_fp(infection_site_normalized, pred_infection_site),
fn = get_infection_site_fn(infection_site_normalized, pred_infection_site))
view(microsp_infection_preds)
print('hello', 'there')
print('hello')
infection_precision <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fp))
infection_recall <-
sum(microsp_infection_preds$tp) / (sum(microsp_infection_preds$tp) + sum(microsp_infection_preds$fn))
view(filter(microsp_infection_preds, tp == 0))
write_csv(filter(microsp_infection_preds, tp == 0), 'no_tp_check.csv')
write_csv(filter(microsp_infection_preds, fp > 0), 'fp_check.csv')
write_csv(filter(microsp_infection_preds, fn > 0), 'missing_check.csv')
x = filter(microsp_infection_preds, fn > 0)
