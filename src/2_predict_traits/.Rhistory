view(aligned_DA)
str_split('hello ||| there', ' \\|\\|\\| ')[[1]]
tolower('HELLO')
turn_number_words_to_digits <- function(pt_coil_pred) {
# ---------------------------------------------------------------------------
# Replace number words in extracted polar tube coil data with digits
# ex: 'five to six coils' -> '5 to 6 coils'
# ---------------------------------------------------------------------------
# get individual coil predictions
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (i in 1 : length(pred)) {
if (tolower(pred[i]) %in% names(WORDS_TO_DIGITS)) {
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
}
}
pt_coil_pred[[i]] <- str_c(pred, collapse = ' ')
}
return(str_c(pt_coil_pred, collapse = ' ||| '))
}
turn_number_words_to_digits('two to five')
pt_coil_pred <- 'two to five'
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
pt_coil_pred
1 : length(pt_coil_pred)
1 : 1
pred <- str_split(pt_coil_pred[1], ' ')[[1]]
pred
pred
length(pred)
i = 1
tolower(pred[i]) %in% names(WORDS_TO_DIGITS)
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
pred[i]
pred
i = 1
i = 2
tolower(pred[i]) %in% names(WORDS_TO_DIGITS)
i = 3
tolower(pred[i]) %in% names(WORDS_TO_DIGITS)
pred[3]
WORDS_TO_DIGITS <- list('one' = 1, 'two' = 2, 'three' = 3, 'four' = 4,
'five' = 5, 'six' = 6, 'seven' = 6, 'eight' = 8,
'nine' = 9, 'ten' = 10)
tolower(pred[i {
}])
tolower(pred[i])
tolower(pred[i]) %in% names(WORDS_TO_DIGITS)
i = 3
tolower(pred[i]) %in% names(WORDS_TO_DIGITS)
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
pred
pt_coil_pred[i] <- str_c(pred, collapse = ' ')
pt_coil_pred
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
class(pt_coil_pred)
pt_coil_pred
pt_coil_pred[i] <- '2 to 5'
pt_coil_pred
length(pt_coil_pred)
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
replace(pt_coil_pred, 1, '2 to 5')
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (i in 1 : length(pred)) {
if (tolower(pred[i]) %in% names(WORDS_TO_DIGITS)) {
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
}
}
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
}
pt_coil_pred
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
pt_coil_pred
i = 1
pred <- str_split(pt_coil_pred[i], ' ')[[1]]
pred
str_c(pred, collapse = ' ')
replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
x = replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
x
pt_coil_pred = replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
pt_coil_pred
turn_number_words_to_digits <- function(pt_coil_pred) {
# ---------------------------------------------------------------------------
# Replace number words in extracted polar tube coil data with digits
# ex: 'five to six coils' -> '5 to 6 coils'
# ---------------------------------------------------------------------------
# get individual coil predictions
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (i in 1 : length(pred)) {
if (tolower(pred[i]) %in% names(WORDS_TO_DIGITS)) {
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
}
}
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
}
return(str_c(pt_coil_pred, collapse = ' ||| '))
}
turn_number_words_to_digits('two to five')
pt_coil_pred = 'two to five'
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
pt_coil_pred
i = 1
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
pred
for (i in 1 : length(pred)) {
if (tolower(pred[i]) %in% names(WORDS_TO_DIGITS)) {
pred[i] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
}
}
pred
str_c(pred, collapse = ' ')
str_c(pred, collapse = ' ')
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
i
i = 1
pt_coil_pred <- str_split('two to five', ' \\|\\|\\| ')[[1]]
i = 1
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
pred
for (j in 1 : length(pred)) {
if (tolower(pred[i]) %in% names(WORDS_TO_DIGITS)) {
pred[j] <- WORDS_TO_DIGITS[[tolower(pred[i])]]
}
}
pred
i
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
pt_coil_pred
i = 1
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
pt_coil_pred <- str_split('two to five', ' \\|\\|\\| ')[[1]]
i = 21
i = 1
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
pred
pred[3] %in% names(WORDS_TO_DIGITS)
for (j in 1 : length(pred)) {
if (tolower(pred[j]) %in% names(WORDS_TO_DIGITS)) {
pred[j] <- WORDS_TO_DIGITS[[tolower(pred[j])]]
}
}
pred
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
pt_coil_pred
turn_number_words_to_digits <- function(pt_coil_pred) {
# ---------------------------------------------------------------------------
# Replace number words in extracted polar tube coil data with digits
# ex: 'five to six coils' -> '5 to 6 coils'
# ---------------------------------------------------------------------------
# get individual coil predictions
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (j in 1 : length(pred)) {
if (tolower(pred[j]) %in% names(WORDS_TO_DIGITS)) {
pred[j] <- WORDS_TO_DIGITS[[tolower(pred[j])]]
}
}
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
}
return(str_c(pt_coil_pred, collapse = ' ||| '))
}
turn_number_words_to_digits('two to five ||| 6-7 coils ||| five-seven')
turn_number_words_to_digits('two to five ||| 6-7 coils ||| five - seven')
view(pt_coil_preds)
## Evaluate polar tube coil predictions
WORDS_TO_DIGITS <- list('one' = 1, 'two' = 2, 'three' = 3, 'four' = 4,
'five' = 5, 'six' = 6, 'seven' = 6, 'eight' = 8,
'nine' = 9, 'ten' = 10)
date_to_range <- function(pt_coils_range) {
# ---------------------------------------------------------------------------
# Turn ranges that Excel turned into dates, back into ranges
# ---------------------------------------------------------------------------
if (!str_detect(pt_coils_range, '2022-')) {
return(pt_coils_range)
}
pt_coils_range <- str_c(
as.integer(str_split(str_remove(pt_coils_range, '2022-'), '-')[[1]]),
collapse = '-'
)
return(pt_coils_range)
}
turn_number_words_to_digits <- function(pt_coil_pred) {
# ---------------------------------------------------------------------------
# Replace number words in extracted polar tube coil data with digits
# ex: 'five to six coils' -> '5 to 6 coils'
# ---------------------------------------------------------------------------
# get individual coil predictions
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (j in 1 : length(pred)) {
if (tolower(pred[j]) %in% names(WORDS_TO_DIGITS)) {
pred[j] <- WORDS_TO_DIGITS[[tolower(pred[j])]]
}
}
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
}
return(str_c(pt_coil_pred, collapse = ' ||| '))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = turn_number_words_to_digits(pred_pt_coil)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(pt_coil_preds)
view(select(pt_coil_preds, species, pred_pt_coil, pred_pt_coil_formatted))
## Evaluate polar tube coil predictions
WORDS_TO_DIGITS <- list('one' = 1, 'two' = 2, 'three' = 3, 'four' = 4,
'five' = 5, 'six' = 6, 'seven' = 7, 'eight' = 8,
'nine' = 9, 'ten' = 10)
date_to_range <- function(pt_coils_range) {
# ---------------------------------------------------------------------------
# Turn ranges that Excel turned into dates, back into ranges
# ---------------------------------------------------------------------------
if (!str_detect(pt_coils_range, '2022-')) {
return(pt_coils_range)
}
pt_coils_range <- str_c(
as.integer(str_split(str_remove(pt_coils_range, '2022-'), '-')[[1]]),
collapse = '-'
)
return(pt_coils_range)
}
turn_number_words_to_digits <- function(pt_coil_pred) {
# ---------------------------------------------------------------------------
# Replace number words in extracted polar tube coil data with digits
# ex: 'five to six coils' -> '5 to 6 coils'
# ---------------------------------------------------------------------------
# get individual coil predictions
pt_coil_pred <- str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_pred)) {
pred <- str_split(pt_coil_pred[i], ' ')[[1]]  # split into words
for (j in 1 : length(pred)) {
if (tolower(pred[j]) %in% names(WORDS_TO_DIGITS)) {
pred[j] <- WORDS_TO_DIGITS[[tolower(pred[j])]]
}
}
pt_coil_pred <- replace(pt_coil_pred, i, str_c(pred, collapse = ' '))
}
return(str_c(pt_coil_pred, collapse = ' ||| '))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = turn_number_words_to_digits(pred_pt_coil)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
PT_COIL_RANGE <- '\\d{1,2}( to | or | and | ?- ?)\\d{1,2}'
str_view('5 or 6', PT_COIL_RANGE)
str_view('5 or 6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
str_view('5 - 6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
str_view('5 and 6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
str_view('5 - 6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
str_view('5-6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
str_extract('5-6 polar tube coils, 7 sheckles', PT_COIL_RANGE)
extract_pt_coil_range <- function(pt_coil_pred) {
return(
str_c(sapply(str_split(pt_coil_pred, ' \\|\\|\\| ')[[1]],
function(s) {str_extract(s, PT_COIL_RANGE)}),
collapse = ' ||| ')
)
}
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)\\d{1,2}\\.?\\d?'
extract_pt_coil_range('3.5-4.5 nearly vertical coils')
extract_pt_coil_range('
2 other coils')
extract_pt_coil_range('	2 other coils')
extract_pt_coil_range('2 other coils')
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)\\d{1,2}?\\.?\\d?'
extract_pt_coil_range('2 other coils')
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d{1,2}?\\.?\\d?'
extract_pt_coil_range('2 other coils')
extract_pt_coil_range('2 other coils')
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d{1,2}?\\.?\\d?'
str_view('2 other coils', PT_COIL_RANGE)
str_view('12 coils ||| 25 coils', PT_COIL_RANGE)
str_view('12 coils', PT_COIL_RANGE)
str_view('2 coils', PT_COIL_RANGE)
str_view('2 coils', '\\d{1,2}')
str_view('2 coils', '\\d{1,2}\\.?')
str_view('2 coils', '\\d{1,2}\\.?\\d?')
str_view('2 coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?')
str_view('2 coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d{1,2}?')
str_view('2 coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d?')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d{1,2}?')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d*')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d*\\.?\\d*')
str_view('2 to coils', '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d*\\.?\\d?')
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?)?\\d*\\.?\\d?'
str_view('2 other coils', PT_COIL_RANGE)
extract_pt_coil_range()
extract_pt_coil_range('2 other coils')
extract_pt_coil_range('12 coils ||| 25 coils')
extract_pt_coil_range('
10–18 coils ||| 10–18 coils')
extract_pt_coil_range('10–18 coils ||| 10–18 coils')
str_view_all('10–18 coils ||| 10–18 coils', PT_CO)
str_view_all('10–18 coils ||| 10–18 coils', PT_COIL)
str_view_all('10–18 coils ||| 10–18 coils', PT_COIL_RANGE)
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?| ?– ?)?\\d*\\.?\\d?'
str_view_all('10–18 coils ||| 10–18 coils', PT_COIL_RANGE)
extract_pt_coil_range('9.5-10 polar filament coils')
extract_pt_coil_range('37 to 40 coils')
extract_pt_coil_range('8–10 coils')
extract_pt_coil_range('1 type having a few coils ||| 4 coils ||| 9 coils')
extract_pt_coil_range('12—13 coils')
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?| ?– ?| ?— ?)?\\d*\\.?\\d?'
extract_pt_coil_range('12—13 coils')
extract_pt_coil_range('5 turns ||| 5 turns in the coiled ||| 10 turns ||| 15 turns')
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil))) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(select(pt_coil_preds, species, pred_pt_coil, pred_pt_coil_formatted))
PT_COIL_RANGE <- '\\d{1,2}\\.?\\d?( to | or | and | ?- ?| ?– ?| ?— ?|\\/)?\\d*\\.?\\d?'
str_extract('10/11 coils', PT_COIL_RANGE)
mean(c(4, 7))
view(select(pt_coil_preds, species, pred_pt_coil, pred_pt_coil_formatted))
pred_pt_coil_formatted <- '18 to 20 ||| 3 to 5 ||| 1-2'
pt_coil_preds <- str_split(pred_pt_coil_formatted, ' \\|\\|\\| ')[[1]]
pt_coil_preds
for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[1], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
pt_coil_preds
pt_coil_preds <- str_split(pred_pt_coil_formatted, ' \\|\\|\\| ')[[1]]
pt_coil_preds
for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[i], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
pt_coil_preds
convert_pt_coil_ranges_to_medians <- function(pred_pt_coil_formatted) {
pt_coil_preds <- str_split(pred_pt_coil_formatted, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[i], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
return(str_c(pt_coil_preds, '; '))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil))) %>%
# pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(pt_coil_preds)
x = '5-6'
convert_pt_coil_ranges_to_medians(x)
convert_pt_coil_ranges_to_medians <- function(pred_pt_coil_formatted) {
pt_coil_preds <- str_split(pred_pt_coil_formatted, ' \\|\\|\\| ')[[1]]
for (i in 1 : length(pt_coil_preds)) {
# get average/median of a range of polar tube coils
pt_coil_preds[i] <-
mean(
as.numeric(str_split(pt_coil_preds[i], '( to | or | and | ?- ?| ?– ?| ?— ?|\\/)')[[1]])
)
}
return(str_c(pt_coil_preds, collapse = '; '))
}
convert_pt_coil_ranges_to_medians(x)
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg)))
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg))
view(pt_coil_preds)
get_pt_coil_precision <- function(pt_coils_avg, pred_pt_coil_avg) {
pt_coils_avg <- str_split(pt_coils_avg, '; ')[[1]]
pred_pt_coil_avg <- str_split(pred_pt_coil_avg, '; ')[[1]]
true_pos <- length(pred_pt_coil_avg[pred_pt_coil_avg %in% pt_coils_avg])
false_pos <- length(pred_pt_coil_avg[!(pred_pt_coil_avg %in% pt_coils_avg)])
return(true_pos / (true_pos + false_pos))
}
get_pt_coil_recall <- function(pt_coils_avg, pred_pt_coil_avg) {
pt_coils_avg <- str_split(pt_coils_avg, '; ')[[1]]
pred_pt_coil_avg <- str_split(pred_pt_coil_avg, '; ')[[1]]
true_pos <- length(pred_pt_coil_avg[pred_pt_coil_avg %in% pt_coils_avg])
false_neg <- length(pt_coils_avg[!(pt_coils_avg %in% pred_pt_coil_avg)])
return(true_pos / (true_pos + false_neg))
}
pt_coil_preds <- read_csv('../../results/microsp_pt_predictions.csv') %>%
rowwise() %>%
mutate(pt_coils_range = ifelse(!is.na(pt_coils_range),
date_to_range(pt_coils_range),
NA),
pred_pt_coil_formatted = extract_pt_coil_range(turn_number_words_to_digits(pred_pt_coil)),
pred_pt_coil_avg = convert_pt_coil_ranges_to_medians(pred_pt_coil_formatted)) %>%
filter(!is.na(pred_pt_coil) | !is.na(pt_coils_range) | !is.na(pt_coils_avg)) %>%
mutate(precision = get_pt_coil_precision(pt_coils_avg, pred_pt_coil_avg),
recall = get_pt_coil_recall(pt_coils_avg, pred_pt_coil_avg))
view(pt_coil_preds)
mean(pt_coil_preds$precision)
mean(pt_coil_preds$recall)
library(tidyverse)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv')
view(microsp_locality_preds)
str_remove('Chytridiopsida ()', ' \\([A-Za-z]+\\)')
str_remove('Chytridiopsida ()', ' \\([[A-Za-z]]+\\)')
str_remove('Chytridiopsida ()', ' \\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', ' \\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', '\\([A-Za-z]*\\)')
str_extract('Chytridiopsida ()', '(?<=\\())[A-Za-z]*(?=\\)')
str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))')
str_split(str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('United States (Новая | Новая)', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Chytridiopsida ()', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\()[A-Za-z]*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
str_split(str_extract('Russia (Siberia | Tomsk | Kemerovo | Novosibirsk)', '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
library(tidyverse)
microsp_locality_preds <- read_csv('../../results/microsp_locality_predictions.csv')
view(microsp_locality_preds)
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv')
view(microsp_host_preds)
locality <- "(Near Greifswald) Germany"
pred_locality <- "Chytridiopsida (); Acarispora ()"
locality <- str_split(locality, '; ')[[1]]
pred_locality <- str_split(pred_locality, '; ')[[1]]
false_pos <- c()
locality
pred_locality
for (pred in pred_locality) {
pred_region <- str_remove(pred, ' \\(.*\\)')
pred_subregions <-
str_split(str_extract(pred, '(?<=\\().*(?=\\))'), ' \\| ')[[1]]
print(pred_region)
print(pred_subregions)
print('##################################')
}
view(microsp_host_preds)
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv') %>%
mutate(species_formatted = format_species_name(species)) %>%
rowwise() %>%
mutate(microsp_predicted = check_microsp_prediction(species_formatted, pred_species),
microsp_predicted_2 = check_microsp_prediction(species_formatted, pred_species_2))
format_species_name <- Vectorize(function(species) {
# TODO - allow abbreviated name matches
species <- str_remove(species, '( \\d+| from .+)')
if (str_detect(species, '\\(')) {
alt_name <- str_remove_all(str_extract(species, '\\(=?.+\\)'), '(\\(|\\)|= )')
return(str_c(str_remove(species, ' \\(.+'), '; ', alt_name))
}
return(species)
})
check_microsp_prediction <- function(species, pred_species) {
if (is.na(pred_species)) {
return(FALSE)
}
# make matches case insensitive
species <- tolower(str_split(species, '; ')[[1]])
pred_species <- tolower(str_split(pred_species, '; ')[[1]])
for (sp in species) {
if (any(str_detect(pred_species, sp))) {
return(TRUE)
}
}
return(FALSE)
}
microsp_host_preds <- read_csv('../../results/microsp_and_host_predictions.csv') %>%
mutate(species_formatted = format_species_name(species)) %>%
rowwise() %>%
mutate(microsp_predicted = check_microsp_prediction(species_formatted, pred_species),
microsp_predicted_2 = check_microsp_prediction(species_formatted, pred_species_2))
view(microsp_host_preds)
sum(microsp_host_preds$microsp_predicted_2 / nrow(microsp_host_preds))
